package br.com.elvisassis.domain.service;import br.com.elvisassis.domain.repository.CourierRepository;import io.quarkus.hibernate.reactive.panache.common.WithTransaction;import io.smallrye.mutiny.Uni;import jakarta.enterprise.context.ApplicationScoped;import jakarta.inject.Inject;import jakarta.transaction.Transactional;import lombok.extern.slf4j.Slf4j;import org.apache.kafka.common.errors.ResourceNotFoundException;import java.util.UUID;@Transactional@ApplicationScoped@Slf4jpublic class CourierDeliveryService {    @Inject    private CourierRepository courierRepository;    @WithTransaction    public Uni<Void> assign(UUID deliveryId) {        return courierRepository.findTop1ByOrderByLastFulfilledDeliveryAtAsc()                .onItem().ifNull().failWith(() -> new ResourceNotFoundException("Resource not found!"))                .invoke(courier -> courier.assign(deliveryId))                .invoke(courier ->                        log.info("Courier {} assigned to delivery {}", courier.getId(), deliveryId))                .call(courierRepository::saveAndFlush)                .replaceWithVoid();    }    @WithTransaction    public Uni<Void> fulfill(UUID deliveryId) {        return courierRepository.findByPendingDeliveries_Id(deliveryId)                .onItem().ifNull().failWith(() -> new ResourceNotFoundException("Resource not found!"))                .invoke(courier -> courier.fulfill(deliveryId))                .invoke(courier ->                        log.info("Courier {} fulfilled the delivery {}", courier.getId(), deliveryId))                .call(courierRepository::saveAndFlush)                .replaceWithVoid();    }}