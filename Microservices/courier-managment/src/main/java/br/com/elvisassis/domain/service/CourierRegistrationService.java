package br.com.elvisassis.domain.service;import br.com.elvisassis.api.model.CourierDTO;import br.com.elvisassis.api.model.CourierInput;import br.com.elvisassis.api.model.PagedResult;import br.com.elvisassis.api.model.mapper.CourierMapper;import br.com.elvisassis.domain.model.Courier;import br.com.elvisassis.domain.repository.CourierRepository;import io.quarkus.hibernate.reactive.panache.common.WithTransaction;import io.smallrye.mutiny.Uni;import jakarta.enterprise.context.ApplicationScoped;import jakarta.inject.Inject;import jakarta.transaction.Transactional;import jakarta.validation.Valid;import lombok.extern.slf4j.Slf4j;import org.apache.kafka.common.errors.ResourceNotFoundException;import java.util.List;import java.util.UUID;@ApplicationScoped@Transactional@Slf4jpublic class CourierRegistrationService {    @Inject    private CourierRepository courierRepository;    @WithTransaction    public Uni<CourierDTO> create(@Valid CourierInput input) {        Courier courier = Courier.brandNew(input.getName(), input.getPhone());        return courierRepository.saveAndFlush(courier)                .map(CourierMapper::toResponseDTO);    }    @WithTransaction    public Uni<CourierDTO> update(UUID courierId, CourierInput input) {        return courierRepository.findById(courierId)                .onItem().ifNull().failWith(() -> new ResourceNotFoundException("Resource not found!"))                .invoke(courier -> {                    courier.setName(input.getName());                    courier.setPhone(input.getPhone());                })                .call(courierRepository::saveAndFlush)                .map(CourierMapper::toResponseDTO);    }    @WithTransaction    public Uni<CourierDTO> findById(UUID courierId) {        return courierRepository.findById(courierId)                .onItem().ifNull().failWith(() -> new ResourceNotFoundException("Resource not found!"))                .map(CourierMapper::toResponseDTO);    }    @WithTransaction    public Uni<PagedResult<CourierDTO>> findAll(int page, int size) {        return courierRepository.findAllPaged(page, size)                .map(pageResultCourier -> {                    PagedResult<CourierDTO> pagedResultDTO = new PagedResult<>();                    List<CourierDTO> dtoItems = pageResultCourier.getContent().stream()                            .map(CourierMapper::toResponseDTO)                            .toList();                    pagedResultDTO.setContent(dtoItems);                    pagedResultDTO.setTotalPages(pageResultCourier.getTotalPages());                    pagedResultDTO.setTotalElements(pageResultCourier.getTotalElements());                    return pagedResultDTO;                });    }}