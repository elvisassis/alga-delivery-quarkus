package br.com.elvisassis.api.controller;import br.com.elvisassis.api.model.*;import br.com.elvisassis.domain.repository.CourierRepository;import br.com.elvisassis.domain.service.CalculatePayoutService;import br.com.elvisassis.domain.service.CourierRegistrationService;import io.smallrye.mutiny.Uni;import jakarta.enterprise.context.ApplicationScoped;import jakarta.inject.Inject;import jakarta.validation.Valid;import jakarta.ws.rs.*;import jakarta.ws.rs.core.MediaType;import org.jboss.resteasy.reactive.RestResponse;import java.math.BigDecimal;import java.util.UUID;@Path("/api/v1/couriers")@ApplicationScopedpublic class CourierController {    @Inject    private CourierRegistrationService courierRegistrationService;    @Inject    private CourierRepository courierRepository;    @Inject    private CalculatePayoutService calculatePayoutService;    @POST    @Consumes(MediaType.APPLICATION_JSON)    @Produces(MediaType.APPLICATION_JSON)    public Uni<RestResponse<CourierDTO>> create(@Valid CourierInput input) {        return courierRegistrationService.create(input)                .map(dto -> RestResponse.status(RestResponse.Status.CREATED, dto));    }    @PUT    @Path("/{courierId}")    @Produces(MediaType.APPLICATION_JSON)    public Uni<RestResponse<CourierDTO>> update(@PathParam("courierId") UUID courierId,                                                @Valid CourierInput input) {        return courierRegistrationService.update(courierId, input)                .map(dto -> RestResponse.ok(dto));    }    @GET    @Produces(MediaType.APPLICATION_JSON)    public Uni<PagedResult<CourierDTO>> findAll(@QueryParam("page") int page,                                                @QueryParam("size") int size) {        return courierRegistrationService.findAll(page, size);    }    @GET    @Path("/{courierId}")    public Uni<RestResponse<CourierDTO>> findById(@PathParam("courierId") UUID courierId) {        return courierRegistrationService.findById(courierId)                .map(dto -> RestResponse.ok(dto));    }    @POST    @Path("/payout-calculate")    public Uni<RestResponse<CourierPayoutResultModel>> calculate(CourierPayoutCalculateInput input) {        BigDecimal payoutFee = calculatePayoutService.calculate(input.getDistanceInKm());        return Uni.createFrom().item(                () -> RestResponse.ok(new CourierPayoutResultModel(payoutFee)));    }}