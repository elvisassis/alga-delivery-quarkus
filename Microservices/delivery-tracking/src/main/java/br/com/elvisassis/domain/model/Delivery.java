package br.com.elvisassis.domain.model;import br.com.elvisassis.domain.events.DeliveryEvents;import br.com.elvisassis.domain.exception.DomainException;import jakarta.persistence.*;import jakarta.ws.rs.core.MediaType;import java.awt.*;import java.math.BigDecimal;import java.time.Duration;import java.time.OffsetDateTime;import java.util.*;import java.util.List;@Entitypublic class Delivery extends DeliveryEvents {    public Delivery() {}    @Id    private UUID id;    private UUID courierId;    private DeliveryStatus status;    private OffsetDateTime placedAt;    private OffsetDateTime assignedAt;    private OffsetDateTime expectedDeliveryAt;    private OffsetDateTime fulfilledAt;    private BigDecimal distanceFee;    private BigDecimal courierPayout;    private BigDecimal totalCost;    private Integer totalItems;    @Embedded    @AttributeOverrides({            @AttributeOverride(name = "zipCode", column = @Column(name = "sender_zip_code")),            @AttributeOverride(name = "street", column = @Column(name = "sender_street")),            @AttributeOverride(name = "number", column = @Column(name = "sender_number")),            @AttributeOverride(name = "complement", column = @Column(name = "sender_complement")),            @AttributeOverride(name = "name", column = @Column(name = "sender_name")),            @AttributeOverride(name = "phone", column = @Column(name = "sender_phone"))    })    private ContactPoint sender;    @Embedded    @AttributeOverrides({            @AttributeOverride(name = "zipCode", column = @Column(name = "recipient_zip_code")),            @AttributeOverride(name = "street", column = @Column(name = "recipient_street")),            @AttributeOverride(name = "number", column = @Column(name = "recipient_number")),            @AttributeOverride(name = "complement", column = @Column(name = "recipient_complement")),            @AttributeOverride(name = "name", column = @Column(name = "recipient_name")),            @AttributeOverride(name = "phone", column = @Column(name = "recipient_phone"))    })    private ContactPoint recipient;    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = "delivery",    fetch = FetchType.EAGER)    private List<Item> items = new ArrayList<>();    public static Delivery draft() {        Delivery delivery = new Delivery();        delivery.setId(UUID.randomUUID());        delivery.setStatus(DeliveryStatus.DRAFT);        delivery.setTotalItems(0);        delivery.setTotalCost(BigDecimal.ZERO);        delivery.setCourierPayout(BigDecimal.ZERO);        delivery.setDistanceFee(BigDecimal.ZERO);        return delivery;    }    public UUID addItem(String name, int quantity) {        Item item = Item.brandNew(name, quantity, this);        items.add(item);        calculateTotalItems();        return item.getId();    }    public void removeItem(UUID itemId) {        items.removeIf(item -> item.getId().equals(itemId));        calculateTotalItems();    }    private void calculateTotalItems() {        int totalItems = getItems().stream().mapToInt(Item::getQuantity).sum();        setTotalItems(totalItems);    }    public void changeItemQuantity(UUID itemId, int quantity) {        Item item = getItems().stream().filter(i -> i.getId().equals(itemId))                .findFirst().orElseThrow();        item.setQuantity(quantity);        calculateTotalItems();    }    public void removeItems() {        items.clear();        calculateTotalItems();    }    public void editPreparationDetails(PreparationDetails details) {        verifyIfCanBeEdited();        setSender(details.getSender());        setRecipient(details.getRecipient());        setDistanceFee(details.getDistanceFee());        setCourierPayout(details.getCourierPayout());        setExpectedDeliveryAt(OffsetDateTime.now().plus(details.getExpectedDeliveryTime()));        setTotalCost(this.getDistanceFee().add(this.getCourierPayout()));    }    public void place() {        verifyIfCanBePlaced();        this.changeStatusTo(DeliveryStatus.WAITING_FOR_COURIER);        this.setPlacedAt(OffsetDateTime.now());    }    public void pickUp(UUID courierId) {        this.setCourierId(courierId);        this.changeStatusTo(DeliveryStatus.IN_TRANSIT);        this.setAssignedAt(OffsetDateTime.now());    }    public void markAsDelivered() {        this.changeStatusTo(DeliveryStatus.DELIVERED);        this.setFulfilledAt(OffsetDateTime.now());    }    private void changeStatusTo(DeliveryStatus newStatus) {        if (newStatus != null && this.getStatus().canNotChangeTo(newStatus)) {            throw new DomainException(                    "Invalid status transition from " + this.getStatus() +                            " to " + newStatus            );        }        this.setStatus(newStatus);    }    private void verifyIfCanBeEdited() {        if (!getStatus().equals(DeliveryStatus.DRAFT)) {            throw new DomainException("Invalid status transition " + getStatus().toString());        }    }    private void verifyIfCanBePlaced() {        if (!isFilled()) {            throw new DomainException("Delivery is fulfilled");        }        if (!getStatus().equals(DeliveryStatus.DRAFT)) {            throw new DomainException("Invalid status transition the " + getStatus().toString());        }    }    private boolean isFilled() {        return this.getSender() != null                && this.getRecipient() != null                && this.getTotalCost() != null;    }    public List<Item> getItems() {        return Collections.unmodifiableList(this.items);    }    @Override    public boolean equals(Object object) {        if (!(object instanceof Delivery delivery)) return false;        return Objects.equals(id, delivery.id);    }    @Override    public int hashCode() {        return Objects.hashCode(id);    }    private void setId(UUID id) {        this.id = id;    }    private void setCourierId(UUID courierId) {        this.courierId = courierId;    }    private void setStatus(DeliveryStatus status) {        this.status = status;    }    private void setPlacedAt(OffsetDateTime placedAt) {        this.placedAt = placedAt;    }    private void setAssignedAt(OffsetDateTime assignedAt) {        this.assignedAt = assignedAt;    }    private void setExpectedDeliveryAt(OffsetDateTime expectedDeliveryAt) {        this.expectedDeliveryAt = expectedDeliveryAt;    }    private void setFulfilledAt(OffsetDateTime fulfilledAt) {        this.fulfilledAt = fulfilledAt;    }    private void setSender(ContactPoint sender) {        this.sender = sender;    }    private void setRecipient(ContactPoint recipient) {        this.recipient = recipient;    }    private void setItems(List<Item> items) {        this.items = items;    }    private void setDistanceFee(BigDecimal distanceFee) {        this.distanceFee = distanceFee;    }    private void setCourierPayout(BigDecimal courierPayout) {        this.courierPayout = courierPayout;    }    private void setTotalCost(BigDecimal totalCost) {        this.totalCost = totalCost;    }    private void setTotalItems(Integer totalItems) {        this.totalItems = totalItems;    }    public ContactPoint getSender() {        return sender;    }    public ContactPoint getRecipient() {        return recipient;    }    public BigDecimal getDistanceFee() {        return distanceFee;    }    public BigDecimal getCourierPayout() {        return courierPayout;    }    public UUID getId() {        return id;    }    public UUID getCourierId() {        return courierId;    }    public DeliveryStatus getStatus() {        return status;    }    public OffsetDateTime getPlacedAt() {        return placedAt;    }    public OffsetDateTime getAssignedAt() {        return assignedAt;    }    public OffsetDateTime getExpectedDeliveryAt() {        return expectedDeliveryAt;    }    public OffsetDateTime getFulfilledAt() {        return fulfilledAt;    }    public BigDecimal getTotalCost() {        return totalCost;    }    public Integer getTotalItems() {        return totalItems;    }    public static class PreparationDetails {        private ContactPoint sender;        private ContactPoint recipient;        private Duration expectedDeliveryTime;        private BigDecimal distanceFee;        private BigDecimal courierPayout;        public PreparationDetails(ContactPoint sender, ContactPoint recipient, Duration expectedDeliveryTime, BigDecimal distanceFee, BigDecimal courierPayout) {            this.sender = sender;            this.recipient = recipient;            this.expectedDeliveryTime = expectedDeliveryTime;            this.distanceFee = distanceFee;            this.courierPayout = courierPayout;        }        public static PreparationDetails of(ContactPoint sender, ContactPoint recipient, Duration expectedDeliveryTime, BigDecimal distanceFee, BigDecimal courierPayout){            return new PreparationDetails(sender, recipient, expectedDeliveryTime, distanceFee, courierPayout);        }        public ContactPoint getSender() {            return sender;        }        public ContactPoint getRecipient() {            return recipient;        }        public BigDecimal getDistanceFee() {            return distanceFee;        }        public BigDecimal getCourierPayout() {            return courierPayout;        }        public Duration getExpectedDeliveryTime() {            return expectedDeliveryTime;        }    }}