package br.com.elvisassis.domain.service;import br.com.elvisassis.api.model.ContactPointInput;import br.com.elvisassis.api.model.DeliveryInput;import br.com.elvisassis.domain.exception.DomainException;import br.com.elvisassis.domain.model.ContactPoint;import br.com.elvisassis.domain.model.Delivery;import br.com.elvisassis.domain.repository.DeliveryRepository;import io.smallrye.mutiny.Uni;import jakarta.enterprise.context.ApplicationScoped;import jakarta.inject.Inject;import jakarta.transaction.Transactional;import java.math.BigDecimal;import java.math.RoundingMode;import java.util.Optional;import java.util.UUID;@ApplicationScopedpublic class DeliveryPreparationService {    @Inject    private DeliveryRepository deliveryRepository;    @Inject    private DeliveryTimeEstimationService deliveryTimeEstimationService;    @Inject    private CourierPayoutCalculationService calculationPayout;    public Uni<Delivery> draft(DeliveryInput input) {        Delivery delivery = Delivery.draft();        handlePreparation(input, delivery);        return deliveryRepository.saveAndFlush(delivery);    }    public Uni<Delivery> edit(UUID deliveryId, DeliveryInput input) {        return deliveryRepository.findById(deliveryId)                .onItem().ifNull().failWith(() -> new DomainException())                .onItem().transform(delivery -> {                    handlePreparation(input, delivery);                    return delivery;                })                .onItem().transformToUni(delivery -> {                    return deliveryRepository.saveAndFlush(delivery);                });    }    private void handlePreparation(DeliveryInput input, Delivery delivery) {        ContactPointInput senderInput = input.getSender();        ContactPointInput recipientInput = input.getRecipient();        ContactPoint sender = ContactPoint.of(                senderInput.getPhone(),                senderInput.getName(),                senderInput.getComplement(),                senderInput.getNumber(),                senderInput.getZipCode(),                senderInput.getStreet()        );        ContactPoint recipient = ContactPoint.of(                senderInput.getPhone(),                senderInput.getName(),                senderInput.getComplement(),                senderInput.getNumber(),                senderInput.getZipCode(),                senderInput.getStreet()        );        DeliveryEstimate estimate = deliveryTimeEstimationService.estimate(sender, recipient);        BigDecimal calculatedPayout = calculationPayout.calculatePayout(estimate.getDistanceInKm());    }    private BigDecimal calculateFee(Double distanceInKm) {        return new BigDecimal("3")                .multiply(new BigDecimal(distanceInKm))                .setScale(2, RoundingMode.HALF_EVEN);    }}