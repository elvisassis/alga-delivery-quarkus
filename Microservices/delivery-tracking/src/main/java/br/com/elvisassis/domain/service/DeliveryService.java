package br.com.elvisassis.domain.service;import br.com.elvisassis.api.model.DeliveryResponseDTO;import br.com.elvisassis.api.model.PagedResult;import br.com.elvisassis.api.model.mapper.DeliveryMapper;import br.com.elvisassis.domain.events.DeliveryEvents;import br.com.elvisassis.domain.repository.DeliveryRepository;import io.quarkus.hibernate.reactive.panache.common.WithSession;import io.quarkus.hibernate.reactive.panache.common.WithTransaction;import io.smallrye.mutiny.Uni;import jakarta.enterprise.context.ApplicationScoped;import jakarta.inject.Inject;import jakarta.ws.rs.NotFoundException;import java.util.List;import java.util.UUID;@ApplicationScopedpublic class DeliveryService {    @Inject    private DeliveryRepository deliveryRepository;    @Inject    private DeliveryEvents deliveryEvents;    @WithTransaction    public Uni<PagedResult<DeliveryResponseDTO>> findAll(int page, int size) {        return deliveryRepository.findAllPaged(page, size)                .map(pagedResultDelivery -> {                    PagedResult<DeliveryResponseDTO> pagedResultDTO = new PagedResult<>();                    List<DeliveryResponseDTO> dtoItems = pagedResultDelivery.getContent().stream()                            .map(DeliveryMapper::toResponseDTO)                            .toList();                    pagedResultDTO.setContent(dtoItems);                    pagedResultDTO.setTotalPages(pagedResultDelivery.getTotalPages());                    pagedResultDTO.setTotalElements(pagedResultDelivery.getTotalElements());                    return pagedResultDTO;                });    }    @WithSession    public Uni<DeliveryResponseDTO> findById(UUID deliveryId) {        return deliveryRepository.findById(deliveryId)                .onItem().ifNull().failWith(() -> new NotFoundException())                .map(DeliveryMapper::toResponseDTO);    }    @WithTransaction    public Uni<Void> delete(UUID id) {        return deliveryRepository.deleteById(id).replaceWithVoid();    }}