package br.com.elvisassis.infrastructure.kafka;import jakarta.enterprise.context.ApplicationScoped;import jakarta.annotation.PostConstruct;import org.apache.kafka.clients.admin.AdminClient;import org.apache.kafka.clients.admin.ListTopicsOptions;import org.apache.kafka.clients.admin.NewTopic;import org.eclipse.microprofile.config.inject.ConfigProperty;import java.util.List;import java.util.Properties;import java.util.Set;import java.util.stream.Collectors;@ApplicationScopedpublic class KafkaTopicCreator {    @ConfigProperty(name = "kafka.bootstrap.servers")    String bootstrapServers;    @ConfigProperty(name = "topics.list")    List<TopicConfig> topics;    @ConfigProperty(name = "topics.auto-create", defaultValue = "false")    boolean autoCreate;    @PostConstruct    void init() {        if (autoCreate) {            createTopicsSafely();        } else {            System.out.println("Topic auto-creation is disabled for this profile.");        }    }    private void createTopicsSafely() {        Properties props = new Properties();        props.put("bootstrap.servers", bootstrapServers);        try (AdminClient adminClient = AdminClient.create(props)) {            // Lista tópicos existentes            Set<String> existingTopics = adminClient.listTopics(new ListTopicsOptions().listInternal(false))                    .names()                    .get();            // Filtra apenas tópicos que ainda não existem            List<NewTopic> newTopics = topics.stream()                    .filter(t -> !existingTopics.contains(t.getName()))                    .map(t -> new NewTopic(t.getName(), t.getPartitions(), t.getReplicas()))                    .collect(Collectors.toList());            if (!newTopics.isEmpty()) {                adminClient.createTopics(newTopics).all()                        .whenComplete((r, ex) -> {                            if (ex != null) {                                System.out.println("Error creating topics:  " + ex.getMessage());                            } else {                                System.out.println("Topics created: " +                                        newTopics.stream().map(NewTopic::name).collect(Collectors.joining(", ")));                            }                        });            } else {                System.out.println("All topics already exist. No topics created.");            }        } catch (Exception e) {            System.out.println("Error checking/creating topics: " + e.getMessage());        }    }}