package br.com.elvisassis.domain.service;import br.com.elvisassis.domain.exception.DomainException;import br.com.elvisassis.domain.model.Delivery;import br.com.elvisassis.domain.repository.DeliveryRepository;import io.smallrye.mutiny.Uni;import jakarta.enterprise.context.ApplicationScoped;import jakarta.inject.Inject;import jakarta.transaction.Transactional;import java.util.Optional;import java.util.UUID;@ApplicationScoped@Transactionalpublic class DeliveryCheckpointService {    @Inject    private DeliveryRepository deliveryRepository;    public Uni<Void> place(UUID deliveryId) {        return deliveryRepository.findById(deliveryId)                .onItem().ifNull().failWith(() -> new DomainException())                .invoke(Delivery::place)                .call(deliveryRepository::persistAndFlush)                .replaceWithVoid(); // converte Uni<Delivery> para Uni<Void>    }    public Uni<Void> pickUp(UUID deliveryId, UUID courierId) {        return deliveryRepository.findById(deliveryId)                .onItem().ifNull().failWith(() -> new DomainException())                .invoke(delivery -> delivery.pickUp(courierId))                .call(deliveryRepository::persistAndFlush)                .replaceWithVoid();    }    public Uni<Void> complete(UUID deliveryId) {        return deliveryRepository.findById(deliveryId)                .onItem().ifNull().failWith(() -> new DomainException())                .invoke(Delivery::markAsDelivered)                .call(deliveryRepository::persistAndFlush)                .replaceWithVoid();    }}