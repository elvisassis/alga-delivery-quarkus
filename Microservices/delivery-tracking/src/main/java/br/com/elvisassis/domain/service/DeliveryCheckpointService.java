package br.com.elvisassis.domain.service;import br.com.elvisassis.domain.events.*;import br.com.elvisassis.domain.exception.DomainException;import br.com.elvisassis.domain.model.Delivery;import br.com.elvisassis.domain.repository.DeliveryRepository;import io.quarkus.hibernate.reactive.panache.common.WithTransaction;import io.smallrye.mutiny.Uni;import jakarta.enterprise.context.ApplicationScoped;import jakarta.inject.Inject;import jakarta.transaction.Transactional;import org.apache.kafka.common.errors.ResourceNotFoundException;import java.util.UUID;import static br.com.elvisassis.domain.events.DeliveryTypeEventsEnum.*;@ApplicationScoped@Transactionalpublic class DeliveryCheckpointService {    @Inject    private DeliveryRepository deliveryRepository;    @Inject    private DeliveryEvents deliveryEvents;    @WithTransaction    public Uni<Void> place(UUID deliveryId) {        return deliveryRepository.findById(deliveryId)                .onItem().ifNull().failWith(() -> new ResourceNotFoundException("Resource not found!"))                .invoke(Delivery::place)                .invoke(delivery -> {                    deliveryEvents.firePlaced(new DeliveryPlacedEvent(delivery.getPlacedAt(), DELIVERY_PLACED_EVENT, deliveryId));                })                .call(deliveryRepository::saveAndFlush)                .replaceWithVoid(); // converte Uni<Delivery> para Uni<Void>    }    @WithTransaction    public Uni<Void> pickUp(UUID deliveryId, UUID courierId) {        return deliveryRepository.findById(deliveryId)                .onItem().ifNull().failWith(() -> new DomainException())                .invoke(delivery -> delivery.pickUp(courierId))                .invoke(delivery -> {                    deliveryEvents.firePickUp(new DeliveryPickUpEvent(delivery.getAssignedAt(), DELIVERY_PICKUP_EVENT, deliveryId));                })                .call(deliveryRepository::saveAndFlush)                .replaceWithVoid();    }    @WithTransaction    public Uni<Void> complete(UUID deliveryId) {        return deliveryRepository.findById(deliveryId)                .onItem().ifNull().failWith(() -> new DomainException())                .invoke(Delivery::markAsDelivered)                .invoke(delivery -> {                    deliveryEvents.fireFulfilled(new DeliveryFulfilledEvent(delivery.getFulfilledAt(), DELIVERY_FULFILLED_EVENT, deliveryId));                })                .call(deliveryRepository::saveAndFlush)                .replaceWithVoid();    }}