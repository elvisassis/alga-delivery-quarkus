package br.com.elvisassis.infrastructure.kafka;import br.com.elvisassis.domain.events.*;import jakarta.enterprise.context.ApplicationScoped;import jakarta.enterprise.event.Observes;import org.apache.kafka.clients.producer.ProducerRecord;import org.eclipse.microprofile.reactive.messaging.Channel;import org.eclipse.microprofile.reactive.messaging.Emitter;import javax.xml.crypto.Data;import java.time.OffsetDateTime;import java.util.UUID;@ApplicationScopedpublic class DeliveryEventPublisher {    @Channel("delivery-events")    Emitter<Object> emitter;    public void onDeliveryPlaced(@Observes DeliveryPlacedEvent event) {        ProducerRecord<String, DeliveryPlacedEvent> record = new ProducerRecord<>(                "delivery-placed-events",                event.deliveryId().toString(),                event        );        record.headers().add("__TypeId__", event.type().getValue().getBytes());        emitter.send(record);    }    public void onDeliveryPickUp(@Observes DeliveryPickUpEvent event) {        ProducerRecord<String, Object> record = new ProducerRecord<>(                "delivery-pick-up-events",                event.deliveryId().toString(),                event        );        record.headers().add("__TypeId__", event.type().getValue().getBytes());        emitter.send(record);    }    public void onDeliveryFulfilled(@Observes DeliveryFulfilledEvent event) {        ProducerRecord<String, Object> record = new ProducerRecord<>(                "delivery-fulfilled-events",                event.deliveryId().toString(),                event        );        record.headers().add("__TypeId__", event.type().getValue().getBytes());        emitter.send(record);    }}